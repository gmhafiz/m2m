// Code generated by ent, DO NOT EDIT.

package leaguecertificatetype

const (
	// Label holds the string label denoting the leaguecertificatetype type in the database.
	Label = "league_certificate_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLeagueID holds the string denoting the league_id field in the database.
	FieldLeagueID = "league_id"
	// FieldCertificateTypeID holds the string denoting the certificate_type_id field in the database.
	FieldCertificateTypeID = "certificate_type_id"
	// EdgeLeague holds the string denoting the league edge name in mutations.
	EdgeLeague = "league"
	// EdgeCertificates holds the string denoting the certificates edge name in mutations.
	EdgeCertificates = "certificates"
	// Table holds the table name of the leaguecertificatetype in the database.
	Table = "league_certificate_type"
	// LeagueTable is the table that holds the league relation/edge.
	LeagueTable = "league_certificate_type"
	// LeagueInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeagueInverseTable = "leagues"
	// LeagueColumn is the table column denoting the league relation/edge.
	LeagueColumn = "league_id"
	// CertificatesTable is the table that holds the certificates relation/edge.
	CertificatesTable = "league_certificate_type"
	// CertificatesInverseTable is the table name for the CertificateType entity.
	// It exists in this package in order to avoid circular dependency with the "certificatetype" package.
	CertificatesInverseTable = "certificate_types"
	// CertificatesColumn is the table column denoting the certificates relation/edge.
	CertificatesColumn = "certificate_type_id"
)

// Columns holds all SQL columns for leaguecertificatetype fields.
var Columns = []string{
	FieldID,
	FieldLeagueID,
	FieldCertificateTypeID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
