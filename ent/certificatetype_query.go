// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/bug/ent/certificatetype"
	"entgo.io/bug/ent/leaguecertificatetype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CertificateTypeQuery is the builder for querying CertificateType entities.
type CertificateTypeQuery struct {
	config
	limit                                 *int
	offset                                *int
	unique                                *bool
	order                                 []OrderFunc
	fields                                []string
	predicates                            []predicate.CertificateType
	withLeagueCertificateTypeLeagueTypeID *LeagueCertificateTypeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CertificateTypeQuery builder.
func (ctq *CertificateTypeQuery) Where(ps ...predicate.CertificateType) *CertificateTypeQuery {
	ctq.predicates = append(ctq.predicates, ps...)
	return ctq
}

// Limit adds a limit step to the query.
func (ctq *CertificateTypeQuery) Limit(limit int) *CertificateTypeQuery {
	ctq.limit = &limit
	return ctq
}

// Offset adds an offset step to the query.
func (ctq *CertificateTypeQuery) Offset(offset int) *CertificateTypeQuery {
	ctq.offset = &offset
	return ctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ctq *CertificateTypeQuery) Unique(unique bool) *CertificateTypeQuery {
	ctq.unique = &unique
	return ctq
}

// Order adds an order step to the query.
func (ctq *CertificateTypeQuery) Order(o ...OrderFunc) *CertificateTypeQuery {
	ctq.order = append(ctq.order, o...)
	return ctq
}

// QueryLeagueCertificateTypeLeagueTypeID chains the current query on the "league_certificate_type_league_type_id" edge.
func (ctq *CertificateTypeQuery) QueryLeagueCertificateTypeLeagueTypeID() *LeagueCertificateTypeQuery {
	query := &LeagueCertificateTypeQuery{config: ctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certificatetype.Table, certificatetype.FieldID, selector),
			sqlgraph.To(leaguecertificatetype.Table, leaguecertificatetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, certificatetype.LeagueCertificateTypeLeagueTypeIDTable, certificatetype.LeagueCertificateTypeLeagueTypeIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(ctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CertificateType entity from the query.
// Returns a *NotFoundError when no CertificateType was found.
func (ctq *CertificateTypeQuery) First(ctx context.Context) (*CertificateType, error) {
	nodes, err := ctq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{certificatetype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ctq *CertificateTypeQuery) FirstX(ctx context.Context) *CertificateType {
	node, err := ctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CertificateType ID from the query.
// Returns a *NotFoundError when no CertificateType ID was found.
func (ctq *CertificateTypeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ctq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{certificatetype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ctq *CertificateTypeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CertificateType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CertificateType entity is found.
// Returns a *NotFoundError when no CertificateType entities are found.
func (ctq *CertificateTypeQuery) Only(ctx context.Context) (*CertificateType, error) {
	nodes, err := ctq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{certificatetype.Label}
	default:
		return nil, &NotSingularError{certificatetype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ctq *CertificateTypeQuery) OnlyX(ctx context.Context) *CertificateType {
	node, err := ctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CertificateType ID in the query.
// Returns a *NotSingularError when more than one CertificateType ID is found.
// Returns a *NotFoundError when no entities are found.
func (ctq *CertificateTypeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ctq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{certificatetype.Label}
	default:
		err = &NotSingularError{certificatetype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ctq *CertificateTypeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CertificateTypes.
func (ctq *CertificateTypeQuery) All(ctx context.Context) ([]*CertificateType, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ctq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ctq *CertificateTypeQuery) AllX(ctx context.Context) []*CertificateType {
	nodes, err := ctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CertificateType IDs.
func (ctq *CertificateTypeQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := ctq.Select(certificatetype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ctq *CertificateTypeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ctq *CertificateTypeQuery) Count(ctx context.Context) (int, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ctq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ctq *CertificateTypeQuery) CountX(ctx context.Context) int {
	count, err := ctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ctq *CertificateTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ctq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ctq *CertificateTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := ctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CertificateTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ctq *CertificateTypeQuery) Clone() *CertificateTypeQuery {
	if ctq == nil {
		return nil
	}
	return &CertificateTypeQuery{
		config:                                ctq.config,
		limit:                                 ctq.limit,
		offset:                                ctq.offset,
		order:                                 append([]OrderFunc{}, ctq.order...),
		predicates:                            append([]predicate.CertificateType{}, ctq.predicates...),
		withLeagueCertificateTypeLeagueTypeID: ctq.withLeagueCertificateTypeLeagueTypeID.Clone(),
		// clone intermediate query.
		sql:    ctq.sql.Clone(),
		path:   ctq.path,
		unique: ctq.unique,
	}
}

// WithLeagueCertificateTypeLeagueTypeID tells the query-builder to eager-load the nodes that are connected to
// the "league_certificate_type_league_type_id" edge. The optional arguments are used to configure the query builder of the edge.
func (ctq *CertificateTypeQuery) WithLeagueCertificateTypeLeagueTypeID(opts ...func(*LeagueCertificateTypeQuery)) *CertificateTypeQuery {
	query := &LeagueCertificateTypeQuery{config: ctq.config}
	for _, opt := range opts {
		opt(query)
	}
	ctq.withLeagueCertificateTypeLeagueTypeID = query
	return ctq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CertificateType.Query().
//		GroupBy(certificatetype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ctq *CertificateTypeQuery) GroupBy(field string, fields ...string) *CertificateTypeGroupBy {
	grbuild := &CertificateTypeGroupBy{config: ctq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ctq.sqlQuery(ctx), nil
	}
	grbuild.label = certificatetype.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.CertificateType.Query().
//		Select(certificatetype.FieldName).
//		Scan(ctx, &v)
func (ctq *CertificateTypeQuery) Select(fields ...string) *CertificateTypeSelect {
	ctq.fields = append(ctq.fields, fields...)
	selbuild := &CertificateTypeSelect{CertificateTypeQuery: ctq}
	selbuild.label = certificatetype.Label
	selbuild.flds, selbuild.scan = &ctq.fields, selbuild.Scan
	return selbuild
}

func (ctq *CertificateTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ctq.fields {
		if !certificatetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ctq.path != nil {
		prev, err := ctq.path(ctx)
		if err != nil {
			return err
		}
		ctq.sql = prev
	}
	return nil
}

func (ctq *CertificateTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CertificateType, error) {
	var (
		nodes       = []*CertificateType{}
		_spec       = ctq.querySpec()
		loadedTypes = [1]bool{
			ctq.withLeagueCertificateTypeLeagueTypeID != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CertificateType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CertificateType{config: ctq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ctq.withLeagueCertificateTypeLeagueTypeID; query != nil {
		if err := ctq.loadLeagueCertificateTypeLeagueTypeID(ctx, query, nodes,
			func(n *CertificateType) { n.Edges.LeagueCertificateTypeLeagueTypeID = []*LeagueCertificateType{} },
			func(n *CertificateType, e *LeagueCertificateType) {
				n.Edges.LeagueCertificateTypeLeagueTypeID = append(n.Edges.LeagueCertificateTypeLeagueTypeID, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ctq *CertificateTypeQuery) loadLeagueCertificateTypeLeagueTypeID(ctx context.Context, query *LeagueCertificateTypeQuery, nodes []*CertificateType, init func(*CertificateType), assign func(*CertificateType, *LeagueCertificateType)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*CertificateType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.LeagueCertificateType(func(s *sql.Selector) {
		s.Where(sql.InValues(certificatetype.LeagueCertificateTypeLeagueTypeIDColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CertificateTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "certificate_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ctq *CertificateTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ctq.querySpec()
	_spec.Node.Columns = ctq.fields
	if len(ctq.fields) > 0 {
		_spec.Unique = ctq.unique != nil && *ctq.unique
	}
	return sqlgraph.CountNodes(ctx, ctq.driver, _spec)
}

func (ctq *CertificateTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ctq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ctq *CertificateTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   certificatetype.Table,
			Columns: certificatetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: certificatetype.FieldID,
			},
		},
		From:   ctq.sql,
		Unique: true,
	}
	if unique := ctq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ctq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificatetype.FieldID)
		for i := range fields {
			if fields[i] != certificatetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ctq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ctq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ctq *CertificateTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ctq.driver.Dialect())
	t1 := builder.Table(certificatetype.Table)
	columns := ctq.fields
	if len(columns) == 0 {
		columns = certificatetype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ctq.sql != nil {
		selector = ctq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ctq.unique != nil && *ctq.unique {
		selector.Distinct()
	}
	for _, p := range ctq.predicates {
		p(selector)
	}
	for _, p := range ctq.order {
		p(selector)
	}
	if offset := ctq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ctq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CertificateTypeGroupBy is the group-by builder for CertificateType entities.
type CertificateTypeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ctgb *CertificateTypeGroupBy) Aggregate(fns ...AggregateFunc) *CertificateTypeGroupBy {
	ctgb.fns = append(ctgb.fns, fns...)
	return ctgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ctgb *CertificateTypeGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ctgb.path(ctx)
	if err != nil {
		return err
	}
	ctgb.sql = query
	return ctgb.sqlScan(ctx, v)
}

func (ctgb *CertificateTypeGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ctgb.fields {
		if !certificatetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ctgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ctgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ctgb *CertificateTypeGroupBy) sqlQuery() *sql.Selector {
	selector := ctgb.sql.Select()
	aggregation := make([]string, 0, len(ctgb.fns))
	for _, fn := range ctgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ctgb.fields)+len(ctgb.fns))
		for _, f := range ctgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ctgb.fields...)...)
}

// CertificateTypeSelect is the builder for selecting fields of CertificateType entities.
type CertificateTypeSelect struct {
	*CertificateTypeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cts *CertificateTypeSelect) Scan(ctx context.Context, v any) error {
	if err := cts.prepareQuery(ctx); err != nil {
		return err
	}
	cts.sql = cts.CertificateTypeQuery.sqlQuery(ctx)
	return cts.sqlScan(ctx, v)
}

func (cts *CertificateTypeSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := cts.sql.Query()
	if err := cts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
