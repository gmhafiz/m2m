// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/certificatetype"
	"entgo.io/bug/ent/league"
	"entgo.io/bug/ent/leaguecertificatetype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeagueCertificateTypeUpdate is the builder for updating LeagueCertificateType entities.
type LeagueCertificateTypeUpdate struct {
	config
	hooks    []Hook
	mutation *LeagueCertificateTypeMutation
}

// Where appends a list predicates to the LeagueCertificateTypeUpdate builder.
func (lctu *LeagueCertificateTypeUpdate) Where(ps ...predicate.LeagueCertificateType) *LeagueCertificateTypeUpdate {
	lctu.mutation.Where(ps...)
	return lctu
}

// SetLeagueID sets the "league_id" field.
func (lctu *LeagueCertificateTypeUpdate) SetLeagueID(u uint64) *LeagueCertificateTypeUpdate {
	lctu.mutation.SetLeagueID(u)
	return lctu
}

// SetCertificateTypeID sets the "certificate_type_id" field.
func (lctu *LeagueCertificateTypeUpdate) SetCertificateTypeID(u uint64) *LeagueCertificateTypeUpdate {
	lctu.mutation.SetCertificateTypeID(u)
	return lctu
}

// SetLeague sets the "league" edge to the League entity.
func (lctu *LeagueCertificateTypeUpdate) SetLeague(l *League) *LeagueCertificateTypeUpdate {
	return lctu.SetLeagueID(l.ID)
}

// SetCertificatesID sets the "certificates" edge to the CertificateType entity by ID.
func (lctu *LeagueCertificateTypeUpdate) SetCertificatesID(id uint64) *LeagueCertificateTypeUpdate {
	lctu.mutation.SetCertificatesID(id)
	return lctu
}

// SetCertificates sets the "certificates" edge to the CertificateType entity.
func (lctu *LeagueCertificateTypeUpdate) SetCertificates(c *CertificateType) *LeagueCertificateTypeUpdate {
	return lctu.SetCertificatesID(c.ID)
}

// Mutation returns the LeagueCertificateTypeMutation object of the builder.
func (lctu *LeagueCertificateTypeUpdate) Mutation() *LeagueCertificateTypeMutation {
	return lctu.mutation
}

// ClearLeague clears the "league" edge to the League entity.
func (lctu *LeagueCertificateTypeUpdate) ClearLeague() *LeagueCertificateTypeUpdate {
	lctu.mutation.ClearLeague()
	return lctu
}

// ClearCertificates clears the "certificates" edge to the CertificateType entity.
func (lctu *LeagueCertificateTypeUpdate) ClearCertificates() *LeagueCertificateTypeUpdate {
	lctu.mutation.ClearCertificates()
	return lctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lctu *LeagueCertificateTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lctu.hooks) == 0 {
		if err = lctu.check(); err != nil {
			return 0, err
		}
		affected, err = lctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeagueCertificateTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lctu.check(); err != nil {
				return 0, err
			}
			lctu.mutation = mutation
			affected, err = lctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lctu.hooks) - 1; i >= 0; i-- {
			if lctu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lctu *LeagueCertificateTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := lctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lctu *LeagueCertificateTypeUpdate) Exec(ctx context.Context) error {
	_, err := lctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lctu *LeagueCertificateTypeUpdate) ExecX(ctx context.Context) {
	if err := lctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lctu *LeagueCertificateTypeUpdate) check() error {
	if _, ok := lctu.mutation.LeagueID(); lctu.mutation.LeagueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LeagueCertificateType.league"`)
	}
	if _, ok := lctu.mutation.CertificatesID(); lctu.mutation.CertificatesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LeagueCertificateType.certificates"`)
	}
	return nil
}

func (lctu *LeagueCertificateTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   leaguecertificatetype.Table,
			Columns: leaguecertificatetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: leaguecertificatetype.FieldID,
			},
		},
	}
	if ps := lctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lctu.mutation.LeagueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.LeagueTable,
			Columns: []string{leaguecertificatetype.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: league.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lctu.mutation.LeagueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.LeagueTable,
			Columns: []string{leaguecertificatetype.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: league.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lctu.mutation.CertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.CertificatesTable,
			Columns: []string{leaguecertificatetype.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: certificatetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lctu.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.CertificatesTable,
			Columns: []string{leaguecertificatetype.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: certificatetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaguecertificatetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LeagueCertificateTypeUpdateOne is the builder for updating a single LeagueCertificateType entity.
type LeagueCertificateTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LeagueCertificateTypeMutation
}

// SetLeagueID sets the "league_id" field.
func (lctuo *LeagueCertificateTypeUpdateOne) SetLeagueID(u uint64) *LeagueCertificateTypeUpdateOne {
	lctuo.mutation.SetLeagueID(u)
	return lctuo
}

// SetCertificateTypeID sets the "certificate_type_id" field.
func (lctuo *LeagueCertificateTypeUpdateOne) SetCertificateTypeID(u uint64) *LeagueCertificateTypeUpdateOne {
	lctuo.mutation.SetCertificateTypeID(u)
	return lctuo
}

// SetLeague sets the "league" edge to the League entity.
func (lctuo *LeagueCertificateTypeUpdateOne) SetLeague(l *League) *LeagueCertificateTypeUpdateOne {
	return lctuo.SetLeagueID(l.ID)
}

// SetCertificatesID sets the "certificates" edge to the CertificateType entity by ID.
func (lctuo *LeagueCertificateTypeUpdateOne) SetCertificatesID(id uint64) *LeagueCertificateTypeUpdateOne {
	lctuo.mutation.SetCertificatesID(id)
	return lctuo
}

// SetCertificates sets the "certificates" edge to the CertificateType entity.
func (lctuo *LeagueCertificateTypeUpdateOne) SetCertificates(c *CertificateType) *LeagueCertificateTypeUpdateOne {
	return lctuo.SetCertificatesID(c.ID)
}

// Mutation returns the LeagueCertificateTypeMutation object of the builder.
func (lctuo *LeagueCertificateTypeUpdateOne) Mutation() *LeagueCertificateTypeMutation {
	return lctuo.mutation
}

// ClearLeague clears the "league" edge to the League entity.
func (lctuo *LeagueCertificateTypeUpdateOne) ClearLeague() *LeagueCertificateTypeUpdateOne {
	lctuo.mutation.ClearLeague()
	return lctuo
}

// ClearCertificates clears the "certificates" edge to the CertificateType entity.
func (lctuo *LeagueCertificateTypeUpdateOne) ClearCertificates() *LeagueCertificateTypeUpdateOne {
	lctuo.mutation.ClearCertificates()
	return lctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lctuo *LeagueCertificateTypeUpdateOne) Select(field string, fields ...string) *LeagueCertificateTypeUpdateOne {
	lctuo.fields = append([]string{field}, fields...)
	return lctuo
}

// Save executes the query and returns the updated LeagueCertificateType entity.
func (lctuo *LeagueCertificateTypeUpdateOne) Save(ctx context.Context) (*LeagueCertificateType, error) {
	var (
		err  error
		node *LeagueCertificateType
	)
	if len(lctuo.hooks) == 0 {
		if err = lctuo.check(); err != nil {
			return nil, err
		}
		node, err = lctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeagueCertificateTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lctuo.check(); err != nil {
				return nil, err
			}
			lctuo.mutation = mutation
			node, err = lctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lctuo.hooks) - 1; i >= 0; i-- {
			if lctuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lctuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lctuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LeagueCertificateType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LeagueCertificateTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lctuo *LeagueCertificateTypeUpdateOne) SaveX(ctx context.Context) *LeagueCertificateType {
	node, err := lctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lctuo *LeagueCertificateTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := lctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lctuo *LeagueCertificateTypeUpdateOne) ExecX(ctx context.Context) {
	if err := lctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lctuo *LeagueCertificateTypeUpdateOne) check() error {
	if _, ok := lctuo.mutation.LeagueID(); lctuo.mutation.LeagueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LeagueCertificateType.league"`)
	}
	if _, ok := lctuo.mutation.CertificatesID(); lctuo.mutation.CertificatesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LeagueCertificateType.certificates"`)
	}
	return nil
}

func (lctuo *LeagueCertificateTypeUpdateOne) sqlSave(ctx context.Context) (_node *LeagueCertificateType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   leaguecertificatetype.Table,
			Columns: leaguecertificatetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: leaguecertificatetype.FieldID,
			},
		},
	}
	id, ok := lctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LeagueCertificateType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaguecertificatetype.FieldID)
		for _, f := range fields {
			if !leaguecertificatetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != leaguecertificatetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lctuo.mutation.LeagueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.LeagueTable,
			Columns: []string{leaguecertificatetype.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: league.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lctuo.mutation.LeagueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.LeagueTable,
			Columns: []string{leaguecertificatetype.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: league.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lctuo.mutation.CertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.CertificatesTable,
			Columns: []string{leaguecertificatetype.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: certificatetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lctuo.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.CertificatesTable,
			Columns: []string{leaguecertificatetype.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: certificatetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LeagueCertificateType{config: lctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaguecertificatetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
