// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/bug/ent/certificatetype"
	"entgo.io/bug/ent/league"
	"entgo.io/bug/ent/leaguecertificatetype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeagueCertificateTypeQuery is the builder for querying LeagueCertificateType entities.
type LeagueCertificateTypeQuery struct {
	config
	limit            *int
	offset           *int
	unique           *bool
	order            []OrderFunc
	fields           []string
	predicates       []predicate.LeagueCertificateType
	withLeague       *LeagueQuery
	withCertificates *CertificateTypeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LeagueCertificateTypeQuery builder.
func (lctq *LeagueCertificateTypeQuery) Where(ps ...predicate.LeagueCertificateType) *LeagueCertificateTypeQuery {
	lctq.predicates = append(lctq.predicates, ps...)
	return lctq
}

// Limit adds a limit step to the query.
func (lctq *LeagueCertificateTypeQuery) Limit(limit int) *LeagueCertificateTypeQuery {
	lctq.limit = &limit
	return lctq
}

// Offset adds an offset step to the query.
func (lctq *LeagueCertificateTypeQuery) Offset(offset int) *LeagueCertificateTypeQuery {
	lctq.offset = &offset
	return lctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lctq *LeagueCertificateTypeQuery) Unique(unique bool) *LeagueCertificateTypeQuery {
	lctq.unique = &unique
	return lctq
}

// Order adds an order step to the query.
func (lctq *LeagueCertificateTypeQuery) Order(o ...OrderFunc) *LeagueCertificateTypeQuery {
	lctq.order = append(lctq.order, o...)
	return lctq
}

// QueryLeague chains the current query on the "league" edge.
func (lctq *LeagueCertificateTypeQuery) QueryLeague() *LeagueQuery {
	query := &LeagueQuery{config: lctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(leaguecertificatetype.Table, leaguecertificatetype.FieldID, selector),
			sqlgraph.To(league.Table, league.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, leaguecertificatetype.LeagueTable, leaguecertificatetype.LeagueColumn),
		)
		fromU = sqlgraph.SetNeighbors(lctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertificates chains the current query on the "certificates" edge.
func (lctq *LeagueCertificateTypeQuery) QueryCertificates() *CertificateTypeQuery {
	query := &CertificateTypeQuery{config: lctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(leaguecertificatetype.Table, leaguecertificatetype.FieldID, selector),
			sqlgraph.To(certificatetype.Table, certificatetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, leaguecertificatetype.CertificatesTable, leaguecertificatetype.CertificatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LeagueCertificateType entity from the query.
// Returns a *NotFoundError when no LeagueCertificateType was found.
func (lctq *LeagueCertificateTypeQuery) First(ctx context.Context) (*LeagueCertificateType, error) {
	nodes, err := lctq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{leaguecertificatetype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) FirstX(ctx context.Context) *LeagueCertificateType {
	node, err := lctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LeagueCertificateType ID from the query.
// Returns a *NotFoundError when no LeagueCertificateType ID was found.
func (lctq *LeagueCertificateTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lctq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{leaguecertificatetype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := lctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LeagueCertificateType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LeagueCertificateType entity is found.
// Returns a *NotFoundError when no LeagueCertificateType entities are found.
func (lctq *LeagueCertificateTypeQuery) Only(ctx context.Context) (*LeagueCertificateType, error) {
	nodes, err := lctq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{leaguecertificatetype.Label}
	default:
		return nil, &NotSingularError{leaguecertificatetype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) OnlyX(ctx context.Context) *LeagueCertificateType {
	node, err := lctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LeagueCertificateType ID in the query.
// Returns a *NotSingularError when more than one LeagueCertificateType ID is found.
// Returns a *NotFoundError when no entities are found.
func (lctq *LeagueCertificateTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lctq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{leaguecertificatetype.Label}
	default:
		err = &NotSingularError{leaguecertificatetype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := lctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LeagueCertificateTypes.
func (lctq *LeagueCertificateTypeQuery) All(ctx context.Context) ([]*LeagueCertificateType, error) {
	if err := lctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return lctq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) AllX(ctx context.Context) []*LeagueCertificateType {
	nodes, err := lctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LeagueCertificateType IDs.
func (lctq *LeagueCertificateTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := lctq.Select(leaguecertificatetype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := lctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lctq *LeagueCertificateTypeQuery) Count(ctx context.Context) (int, error) {
	if err := lctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return lctq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) CountX(ctx context.Context) int {
	count, err := lctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lctq *LeagueCertificateTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := lctq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return lctq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (lctq *LeagueCertificateTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := lctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LeagueCertificateTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lctq *LeagueCertificateTypeQuery) Clone() *LeagueCertificateTypeQuery {
	if lctq == nil {
		return nil
	}
	return &LeagueCertificateTypeQuery{
		config:           lctq.config,
		limit:            lctq.limit,
		offset:           lctq.offset,
		order:            append([]OrderFunc{}, lctq.order...),
		predicates:       append([]predicate.LeagueCertificateType{}, lctq.predicates...),
		withLeague:       lctq.withLeague.Clone(),
		withCertificates: lctq.withCertificates.Clone(),
		// clone intermediate query.
		sql:    lctq.sql.Clone(),
		path:   lctq.path,
		unique: lctq.unique,
	}
}

// WithLeague tells the query-builder to eager-load the nodes that are connected to
// the "league" edge. The optional arguments are used to configure the query builder of the edge.
func (lctq *LeagueCertificateTypeQuery) WithLeague(opts ...func(*LeagueQuery)) *LeagueCertificateTypeQuery {
	query := &LeagueQuery{config: lctq.config}
	for _, opt := range opts {
		opt(query)
	}
	lctq.withLeague = query
	return lctq
}

// WithCertificates tells the query-builder to eager-load the nodes that are connected to
// the "certificates" edge. The optional arguments are used to configure the query builder of the edge.
func (lctq *LeagueCertificateTypeQuery) WithCertificates(opts ...func(*CertificateTypeQuery)) *LeagueCertificateTypeQuery {
	query := &CertificateTypeQuery{config: lctq.config}
	for _, opt := range opts {
		opt(query)
	}
	lctq.withCertificates = query
	return lctq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LeagueID uint64 `json:"league_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LeagueCertificateType.Query().
//		GroupBy(leaguecertificatetype.FieldLeagueID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lctq *LeagueCertificateTypeQuery) GroupBy(field string, fields ...string) *LeagueCertificateTypeGroupBy {
	grbuild := &LeagueCertificateTypeGroupBy{config: lctq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := lctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return lctq.sqlQuery(ctx), nil
	}
	grbuild.label = leaguecertificatetype.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LeagueID uint64 `json:"league_id,omitempty"`
//	}
//
//	client.LeagueCertificateType.Query().
//		Select(leaguecertificatetype.FieldLeagueID).
//		Scan(ctx, &v)
func (lctq *LeagueCertificateTypeQuery) Select(fields ...string) *LeagueCertificateTypeSelect {
	lctq.fields = append(lctq.fields, fields...)
	selbuild := &LeagueCertificateTypeSelect{LeagueCertificateTypeQuery: lctq}
	selbuild.label = leaguecertificatetype.Label
	selbuild.flds, selbuild.scan = &lctq.fields, selbuild.Scan
	return selbuild
}

func (lctq *LeagueCertificateTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range lctq.fields {
		if !leaguecertificatetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lctq.path != nil {
		prev, err := lctq.path(ctx)
		if err != nil {
			return err
		}
		lctq.sql = prev
	}
	return nil
}

func (lctq *LeagueCertificateTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LeagueCertificateType, error) {
	var (
		nodes       = []*LeagueCertificateType{}
		_spec       = lctq.querySpec()
		loadedTypes = [2]bool{
			lctq.withLeague != nil,
			lctq.withCertificates != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LeagueCertificateType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LeagueCertificateType{config: lctq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lctq.withLeague; query != nil {
		if err := lctq.loadLeague(ctx, query, nodes, nil,
			func(n *LeagueCertificateType, e *League) { n.Edges.League = e }); err != nil {
			return nil, err
		}
	}
	if query := lctq.withCertificates; query != nil {
		if err := lctq.loadCertificates(ctx, query, nodes, nil,
			func(n *LeagueCertificateType, e *CertificateType) { n.Edges.Certificates = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lctq *LeagueCertificateTypeQuery) loadLeague(ctx context.Context, query *LeagueQuery, nodes []*LeagueCertificateType, init func(*LeagueCertificateType), assign func(*LeagueCertificateType, *League)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*LeagueCertificateType)
	for i := range nodes {
		fk := nodes[i].LeagueID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(league.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "league_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lctq *LeagueCertificateTypeQuery) loadCertificates(ctx context.Context, query *CertificateTypeQuery, nodes []*LeagueCertificateType, init func(*LeagueCertificateType), assign func(*LeagueCertificateType, *CertificateType)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*LeagueCertificateType)
	for i := range nodes {
		fk := nodes[i].CertificateTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(certificatetype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "certificate_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lctq *LeagueCertificateTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lctq.querySpec()
	_spec.Node.Columns = lctq.fields
	if len(lctq.fields) > 0 {
		_spec.Unique = lctq.unique != nil && *lctq.unique
	}
	return sqlgraph.CountNodes(ctx, lctq.driver, _spec)
}

func (lctq *LeagueCertificateTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := lctq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (lctq *LeagueCertificateTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   leaguecertificatetype.Table,
			Columns: leaguecertificatetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: leaguecertificatetype.FieldID,
			},
		},
		From:   lctq.sql,
		Unique: true,
	}
	if unique := lctq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := lctq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaguecertificatetype.FieldID)
		for i := range fields {
			if fields[i] != leaguecertificatetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lctq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lctq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lctq *LeagueCertificateTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lctq.driver.Dialect())
	t1 := builder.Table(leaguecertificatetype.Table)
	columns := lctq.fields
	if len(columns) == 0 {
		columns = leaguecertificatetype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lctq.sql != nil {
		selector = lctq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lctq.unique != nil && *lctq.unique {
		selector.Distinct()
	}
	for _, p := range lctq.predicates {
		p(selector)
	}
	for _, p := range lctq.order {
		p(selector)
	}
	if offset := lctq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lctq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LeagueCertificateTypeGroupBy is the group-by builder for LeagueCertificateType entities.
type LeagueCertificateTypeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lctgb *LeagueCertificateTypeGroupBy) Aggregate(fns ...AggregateFunc) *LeagueCertificateTypeGroupBy {
	lctgb.fns = append(lctgb.fns, fns...)
	return lctgb
}

// Scan applies the group-by query and scans the result into the given value.
func (lctgb *LeagueCertificateTypeGroupBy) Scan(ctx context.Context, v any) error {
	query, err := lctgb.path(ctx)
	if err != nil {
		return err
	}
	lctgb.sql = query
	return lctgb.sqlScan(ctx, v)
}

func (lctgb *LeagueCertificateTypeGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range lctgb.fields {
		if !leaguecertificatetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := lctgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lctgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lctgb *LeagueCertificateTypeGroupBy) sqlQuery() *sql.Selector {
	selector := lctgb.sql.Select()
	aggregation := make([]string, 0, len(lctgb.fns))
	for _, fn := range lctgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(lctgb.fields)+len(lctgb.fns))
		for _, f := range lctgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(lctgb.fields...)...)
}

// LeagueCertificateTypeSelect is the builder for selecting fields of LeagueCertificateType entities.
type LeagueCertificateTypeSelect struct {
	*LeagueCertificateTypeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (lcts *LeagueCertificateTypeSelect) Scan(ctx context.Context, v any) error {
	if err := lcts.prepareQuery(ctx); err != nil {
		return err
	}
	lcts.sql = lcts.LeagueCertificateTypeQuery.sqlQuery(ctx)
	return lcts.sqlScan(ctx, v)
}

func (lcts *LeagueCertificateTypeSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := lcts.sql.Query()
	if err := lcts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
