// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/certificatetype"
	"entgo.io/bug/ent/league"
	"entgo.io/bug/ent/leaguecertificatetype"
	"entgo.io/ent/dialect/sql"
)

// LeagueCertificateType is the model entity for the LeagueCertificateType schema.
type LeagueCertificateType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LeagueID holds the value of the "league_id" field.
	LeagueID uint64 `json:"league_id,omitempty"`
	// CertificateTypeID holds the value of the "certificate_type_id" field.
	CertificateTypeID uint64 `json:"certificate_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LeagueCertificateTypeQuery when eager-loading is set.
	Edges LeagueCertificateTypeEdges `json:"edges"`
}

// LeagueCertificateTypeEdges holds the relations/edges for other nodes in the graph.
type LeagueCertificateTypeEdges struct {
	// League holds the value of the league edge.
	League *League `json:"league,omitempty"`
	// Certificates holds the value of the certificates edge.
	Certificates *CertificateType `json:"certificates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LeagueOrErr returns the League value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeagueCertificateTypeEdges) LeagueOrErr() (*League, error) {
	if e.loadedTypes[0] {
		if e.League == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: league.Label}
		}
		return e.League, nil
	}
	return nil, &NotLoadedError{edge: "league"}
}

// CertificatesOrErr returns the Certificates value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeagueCertificateTypeEdges) CertificatesOrErr() (*CertificateType, error) {
	if e.loadedTypes[1] {
		if e.Certificates == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: certificatetype.Label}
		}
		return e.Certificates, nil
	}
	return nil, &NotLoadedError{edge: "certificates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LeagueCertificateType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case leaguecertificatetype.FieldID, leaguecertificatetype.FieldLeagueID, leaguecertificatetype.FieldCertificateTypeID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LeagueCertificateType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LeagueCertificateType fields.
func (lct *LeagueCertificateType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case leaguecertificatetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lct.ID = int(value.Int64)
		case leaguecertificatetype.FieldLeagueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field league_id", values[i])
			} else if value.Valid {
				lct.LeagueID = uint64(value.Int64)
			}
		case leaguecertificatetype.FieldCertificateTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_type_id", values[i])
			} else if value.Valid {
				lct.CertificateTypeID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryLeague queries the "league" edge of the LeagueCertificateType entity.
func (lct *LeagueCertificateType) QueryLeague() *LeagueQuery {
	return (&LeagueCertificateTypeClient{config: lct.config}).QueryLeague(lct)
}

// QueryCertificates queries the "certificates" edge of the LeagueCertificateType entity.
func (lct *LeagueCertificateType) QueryCertificates() *CertificateTypeQuery {
	return (&LeagueCertificateTypeClient{config: lct.config}).QueryCertificates(lct)
}

// Update returns a builder for updating this LeagueCertificateType.
// Note that you need to call LeagueCertificateType.Unwrap() before calling this method if this LeagueCertificateType
// was returned from a transaction, and the transaction was committed or rolled back.
func (lct *LeagueCertificateType) Update() *LeagueCertificateTypeUpdateOne {
	return (&LeagueCertificateTypeClient{config: lct.config}).UpdateOne(lct)
}

// Unwrap unwraps the LeagueCertificateType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lct *LeagueCertificateType) Unwrap() *LeagueCertificateType {
	_tx, ok := lct.config.driver.(*txDriver)
	if !ok {
		panic("ent: LeagueCertificateType is not a transactional entity")
	}
	lct.config.driver = _tx.drv
	return lct
}

// String implements the fmt.Stringer.
func (lct *LeagueCertificateType) String() string {
	var builder strings.Builder
	builder.WriteString("LeagueCertificateType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lct.ID))
	builder.WriteString("league_id=")
	builder.WriteString(fmt.Sprintf("%v", lct.LeagueID))
	builder.WriteString(", ")
	builder.WriteString("certificate_type_id=")
	builder.WriteString(fmt.Sprintf("%v", lct.CertificateTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// LeagueCertificateTypes is a parsable slice of LeagueCertificateType.
type LeagueCertificateTypes []*LeagueCertificateType

func (lct LeagueCertificateTypes) config(cfg config) {
	for _i := range lct {
		lct[_i].config = cfg
	}
}
