// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/certificatetype"
	"entgo.io/bug/ent/league"
	"entgo.io/bug/ent/leaguecertificatetype"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeagueCertificateTypeCreate is the builder for creating a LeagueCertificateType entity.
type LeagueCertificateTypeCreate struct {
	config
	mutation *LeagueCertificateTypeMutation
	hooks    []Hook
}

// SetLeagueID sets the "league_id" field.
func (lctc *LeagueCertificateTypeCreate) SetLeagueID(u uint64) *LeagueCertificateTypeCreate {
	lctc.mutation.SetLeagueID(u)
	return lctc
}

// SetCertificateTypeID sets the "certificate_type_id" field.
func (lctc *LeagueCertificateTypeCreate) SetCertificateTypeID(u uint64) *LeagueCertificateTypeCreate {
	lctc.mutation.SetCertificateTypeID(u)
	return lctc
}

// SetLeague sets the "league" edge to the League entity.
func (lctc *LeagueCertificateTypeCreate) SetLeague(l *League) *LeagueCertificateTypeCreate {
	return lctc.SetLeagueID(l.ID)
}

// SetCertificatesID sets the "certificates" edge to the CertificateType entity by ID.
func (lctc *LeagueCertificateTypeCreate) SetCertificatesID(id uint64) *LeagueCertificateTypeCreate {
	lctc.mutation.SetCertificatesID(id)
	return lctc
}

// SetCertificates sets the "certificates" edge to the CertificateType entity.
func (lctc *LeagueCertificateTypeCreate) SetCertificates(c *CertificateType) *LeagueCertificateTypeCreate {
	return lctc.SetCertificatesID(c.ID)
}

// Mutation returns the LeagueCertificateTypeMutation object of the builder.
func (lctc *LeagueCertificateTypeCreate) Mutation() *LeagueCertificateTypeMutation {
	return lctc.mutation
}

// Save creates the LeagueCertificateType in the database.
func (lctc *LeagueCertificateTypeCreate) Save(ctx context.Context) (*LeagueCertificateType, error) {
	var (
		err  error
		node *LeagueCertificateType
	)
	if len(lctc.hooks) == 0 {
		if err = lctc.check(); err != nil {
			return nil, err
		}
		node, err = lctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeagueCertificateTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lctc.check(); err != nil {
				return nil, err
			}
			lctc.mutation = mutation
			if node, err = lctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lctc.hooks) - 1; i >= 0; i-- {
			if lctc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lctc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lctc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LeagueCertificateType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LeagueCertificateTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lctc *LeagueCertificateTypeCreate) SaveX(ctx context.Context) *LeagueCertificateType {
	v, err := lctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lctc *LeagueCertificateTypeCreate) Exec(ctx context.Context) error {
	_, err := lctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lctc *LeagueCertificateTypeCreate) ExecX(ctx context.Context) {
	if err := lctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lctc *LeagueCertificateTypeCreate) check() error {
	if _, ok := lctc.mutation.LeagueID(); !ok {
		return &ValidationError{Name: "league_id", err: errors.New(`ent: missing required field "LeagueCertificateType.league_id"`)}
	}
	if _, ok := lctc.mutation.CertificateTypeID(); !ok {
		return &ValidationError{Name: "certificate_type_id", err: errors.New(`ent: missing required field "LeagueCertificateType.certificate_type_id"`)}
	}
	if _, ok := lctc.mutation.LeagueID(); !ok {
		return &ValidationError{Name: "league", err: errors.New(`ent: missing required edge "LeagueCertificateType.league"`)}
	}
	if _, ok := lctc.mutation.CertificatesID(); !ok {
		return &ValidationError{Name: "certificates", err: errors.New(`ent: missing required edge "LeagueCertificateType.certificates"`)}
	}
	return nil
}

func (lctc *LeagueCertificateTypeCreate) sqlSave(ctx context.Context) (*LeagueCertificateType, error) {
	_node, _spec := lctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lctc *LeagueCertificateTypeCreate) createSpec() (*LeagueCertificateType, *sqlgraph.CreateSpec) {
	var (
		_node = &LeagueCertificateType{config: lctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: leaguecertificatetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: leaguecertificatetype.FieldID,
			},
		}
	)
	if nodes := lctc.mutation.LeagueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.LeagueTable,
			Columns: []string{leaguecertificatetype.LeagueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: league.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LeagueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lctc.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaguecertificatetype.CertificatesTable,
			Columns: []string{leaguecertificatetype.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: certificatetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CertificateTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LeagueCertificateTypeCreateBulk is the builder for creating many LeagueCertificateType entities in bulk.
type LeagueCertificateTypeCreateBulk struct {
	config
	builders []*LeagueCertificateTypeCreate
}

// Save creates the LeagueCertificateType entities in the database.
func (lctcb *LeagueCertificateTypeCreateBulk) Save(ctx context.Context) ([]*LeagueCertificateType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lctcb.builders))
	nodes := make([]*LeagueCertificateType, len(lctcb.builders))
	mutators := make([]Mutator, len(lctcb.builders))
	for i := range lctcb.builders {
		func(i int, root context.Context) {
			builder := lctcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeagueCertificateTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lctcb *LeagueCertificateTypeCreateBulk) SaveX(ctx context.Context) []*LeagueCertificateType {
	v, err := lctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lctcb *LeagueCertificateTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := lctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lctcb *LeagueCertificateTypeCreateBulk) ExecX(ctx context.Context) {
	if err := lctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
