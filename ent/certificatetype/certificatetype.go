// Code generated by ent, DO NOT EDIT.

package certificatetype

const (
	// Label holds the string label denoting the certificatetype type in the database.
	Label = "certificate_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeLeagueCertificateTypeLeagueTypeID holds the string denoting the league_certificate_type_league_type_id edge name in mutations.
	EdgeLeagueCertificateTypeLeagueTypeID = "league_certificate_type_league_type_id"
	// Table holds the table name of the certificatetype in the database.
	Table = "certificate_types"
	// LeagueCertificateTypeLeagueTypeIDTable is the table that holds the league_certificate_type_league_type_id relation/edge.
	LeagueCertificateTypeLeagueTypeIDTable = "league_certificate_type"
	// LeagueCertificateTypeLeagueTypeIDInverseTable is the table name for the LeagueCertificateType entity.
	// It exists in this package in order to avoid circular dependency with the "leaguecertificatetype" package.
	LeagueCertificateTypeLeagueTypeIDInverseTable = "league_certificate_type"
	// LeagueCertificateTypeLeagueTypeIDColumn is the table column denoting the league_certificate_type_league_type_id relation/edge.
	LeagueCertificateTypeLeagueTypeIDColumn = "certificate_type_id"
)

// Columns holds all SQL columns for certificatetype fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
