// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"entgo.io/bug/ent/migrate"

	"entgo.io/bug/ent/certificatetype"
	"entgo.io/bug/ent/league"
	"entgo.io/bug/ent/leaguecertificatetype"
	"entgo.io/bug/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CertificateType is the client for interacting with the CertificateType builders.
	CertificateType *CertificateTypeClient
	// League is the client for interacting with the League builders.
	League *LeagueClient
	// LeagueCertificateType is the client for interacting with the LeagueCertificateType builders.
	LeagueCertificateType *LeagueCertificateTypeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CertificateType = NewCertificateTypeClient(c.config)
	c.League = NewLeagueClient(c.config)
	c.LeagueCertificateType = NewLeagueCertificateTypeClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		CertificateType:       NewCertificateTypeClient(cfg),
		League:                NewLeagueClient(cfg),
		LeagueCertificateType: NewLeagueCertificateTypeClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		CertificateType:       NewCertificateTypeClient(cfg),
		League:                NewLeagueClient(cfg),
		LeagueCertificateType: NewLeagueCertificateTypeClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CertificateType.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CertificateType.Use(hooks...)
	c.League.Use(hooks...)
	c.LeagueCertificateType.Use(hooks...)
	c.User.Use(hooks...)
}

// CertificateTypeClient is a client for the CertificateType schema.
type CertificateTypeClient struct {
	config
}

// NewCertificateTypeClient returns a client for the CertificateType from the given config.
func NewCertificateTypeClient(c config) *CertificateTypeClient {
	return &CertificateTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `certificatetype.Hooks(f(g(h())))`.
func (c *CertificateTypeClient) Use(hooks ...Hook) {
	c.hooks.CertificateType = append(c.hooks.CertificateType, hooks...)
}

// Create returns a builder for creating a CertificateType entity.
func (c *CertificateTypeClient) Create() *CertificateTypeCreate {
	mutation := newCertificateTypeMutation(c.config, OpCreate)
	return &CertificateTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CertificateType entities.
func (c *CertificateTypeClient) CreateBulk(builders ...*CertificateTypeCreate) *CertificateTypeCreateBulk {
	return &CertificateTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CertificateType.
func (c *CertificateTypeClient) Update() *CertificateTypeUpdate {
	mutation := newCertificateTypeMutation(c.config, OpUpdate)
	return &CertificateTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertificateTypeClient) UpdateOne(ct *CertificateType) *CertificateTypeUpdateOne {
	mutation := newCertificateTypeMutation(c.config, OpUpdateOne, withCertificateType(ct))
	return &CertificateTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertificateTypeClient) UpdateOneID(id uint64) *CertificateTypeUpdateOne {
	mutation := newCertificateTypeMutation(c.config, OpUpdateOne, withCertificateTypeID(id))
	return &CertificateTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CertificateType.
func (c *CertificateTypeClient) Delete() *CertificateTypeDelete {
	mutation := newCertificateTypeMutation(c.config, OpDelete)
	return &CertificateTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CertificateTypeClient) DeleteOne(ct *CertificateType) *CertificateTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CertificateTypeClient) DeleteOneID(id uint64) *CertificateTypeDeleteOne {
	builder := c.Delete().Where(certificatetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertificateTypeDeleteOne{builder}
}

// Query returns a query builder for CertificateType.
func (c *CertificateTypeClient) Query() *CertificateTypeQuery {
	return &CertificateTypeQuery{
		config: c.config,
	}
}

// Get returns a CertificateType entity by its id.
func (c *CertificateTypeClient) Get(ctx context.Context, id uint64) (*CertificateType, error) {
	return c.Query().Where(certificatetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertificateTypeClient) GetX(ctx context.Context, id uint64) *CertificateType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLeagueCertificateTypeLeagueTypeID queries the league_certificate_type_league_type_id edge of a CertificateType.
func (c *CertificateTypeClient) QueryLeagueCertificateTypeLeagueTypeID(ct *CertificateType) *LeagueCertificateTypeQuery {
	query := &LeagueCertificateTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(certificatetype.Table, certificatetype.FieldID, id),
			sqlgraph.To(leaguecertificatetype.Table, leaguecertificatetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, certificatetype.LeagueCertificateTypeLeagueTypeIDTable, certificatetype.LeagueCertificateTypeLeagueTypeIDColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CertificateTypeClient) Hooks() []Hook {
	return c.hooks.CertificateType
}

// LeagueClient is a client for the League schema.
type LeagueClient struct {
	config
}

// NewLeagueClient returns a client for the League from the given config.
func NewLeagueClient(c config) *LeagueClient {
	return &LeagueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `league.Hooks(f(g(h())))`.
func (c *LeagueClient) Use(hooks ...Hook) {
	c.hooks.League = append(c.hooks.League, hooks...)
}

// Create returns a builder for creating a League entity.
func (c *LeagueClient) Create() *LeagueCreate {
	mutation := newLeagueMutation(c.config, OpCreate)
	return &LeagueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of League entities.
func (c *LeagueClient) CreateBulk(builders ...*LeagueCreate) *LeagueCreateBulk {
	return &LeagueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for League.
func (c *LeagueClient) Update() *LeagueUpdate {
	mutation := newLeagueMutation(c.config, OpUpdate)
	return &LeagueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LeagueClient) UpdateOne(l *League) *LeagueUpdateOne {
	mutation := newLeagueMutation(c.config, OpUpdateOne, withLeague(l))
	return &LeagueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LeagueClient) UpdateOneID(id uint64) *LeagueUpdateOne {
	mutation := newLeagueMutation(c.config, OpUpdateOne, withLeagueID(id))
	return &LeagueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for League.
func (c *LeagueClient) Delete() *LeagueDelete {
	mutation := newLeagueMutation(c.config, OpDelete)
	return &LeagueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LeagueClient) DeleteOne(l *League) *LeagueDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LeagueClient) DeleteOneID(id uint64) *LeagueDeleteOne {
	builder := c.Delete().Where(league.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LeagueDeleteOne{builder}
}

// Query returns a query builder for League.
func (c *LeagueClient) Query() *LeagueQuery {
	return &LeagueQuery{
		config: c.config,
	}
}

// Get returns a League entity by its id.
func (c *LeagueClient) Get(ctx context.Context, id uint64) (*League, error) {
	return c.Query().Where(league.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LeagueClient) GetX(ctx context.Context, id uint64) *League {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLeagueCertificateType queries the league_certificate_type edge of a League.
func (c *LeagueClient) QueryLeagueCertificateType(l *League) *LeagueCertificateTypeQuery {
	query := &LeagueCertificateTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(league.Table, league.FieldID, id),
			sqlgraph.To(leaguecertificatetype.Table, leaguecertificatetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, league.LeagueCertificateTypeTable, league.LeagueCertificateTypeColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LeagueClient) Hooks() []Hook {
	return c.hooks.League
}

// LeagueCertificateTypeClient is a client for the LeagueCertificateType schema.
type LeagueCertificateTypeClient struct {
	config
}

// NewLeagueCertificateTypeClient returns a client for the LeagueCertificateType from the given config.
func NewLeagueCertificateTypeClient(c config) *LeagueCertificateTypeClient {
	return &LeagueCertificateTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `leaguecertificatetype.Hooks(f(g(h())))`.
func (c *LeagueCertificateTypeClient) Use(hooks ...Hook) {
	c.hooks.LeagueCertificateType = append(c.hooks.LeagueCertificateType, hooks...)
}

// Create returns a builder for creating a LeagueCertificateType entity.
func (c *LeagueCertificateTypeClient) Create() *LeagueCertificateTypeCreate {
	mutation := newLeagueCertificateTypeMutation(c.config, OpCreate)
	return &LeagueCertificateTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LeagueCertificateType entities.
func (c *LeagueCertificateTypeClient) CreateBulk(builders ...*LeagueCertificateTypeCreate) *LeagueCertificateTypeCreateBulk {
	return &LeagueCertificateTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LeagueCertificateType.
func (c *LeagueCertificateTypeClient) Update() *LeagueCertificateTypeUpdate {
	mutation := newLeagueCertificateTypeMutation(c.config, OpUpdate)
	return &LeagueCertificateTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LeagueCertificateTypeClient) UpdateOne(lct *LeagueCertificateType) *LeagueCertificateTypeUpdateOne {
	mutation := newLeagueCertificateTypeMutation(c.config, OpUpdateOne, withLeagueCertificateType(lct))
	return &LeagueCertificateTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LeagueCertificateTypeClient) UpdateOneID(id int) *LeagueCertificateTypeUpdateOne {
	mutation := newLeagueCertificateTypeMutation(c.config, OpUpdateOne, withLeagueCertificateTypeID(id))
	return &LeagueCertificateTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LeagueCertificateType.
func (c *LeagueCertificateTypeClient) Delete() *LeagueCertificateTypeDelete {
	mutation := newLeagueCertificateTypeMutation(c.config, OpDelete)
	return &LeagueCertificateTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LeagueCertificateTypeClient) DeleteOne(lct *LeagueCertificateType) *LeagueCertificateTypeDeleteOne {
	return c.DeleteOneID(lct.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LeagueCertificateTypeClient) DeleteOneID(id int) *LeagueCertificateTypeDeleteOne {
	builder := c.Delete().Where(leaguecertificatetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LeagueCertificateTypeDeleteOne{builder}
}

// Query returns a query builder for LeagueCertificateType.
func (c *LeagueCertificateTypeClient) Query() *LeagueCertificateTypeQuery {
	return &LeagueCertificateTypeQuery{
		config: c.config,
	}
}

// Get returns a LeagueCertificateType entity by its id.
func (c *LeagueCertificateTypeClient) Get(ctx context.Context, id int) (*LeagueCertificateType, error) {
	return c.Query().Where(leaguecertificatetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LeagueCertificateTypeClient) GetX(ctx context.Context, id int) *LeagueCertificateType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLeague queries the league edge of a LeagueCertificateType.
func (c *LeagueCertificateTypeClient) QueryLeague(lct *LeagueCertificateType) *LeagueQuery {
	query := &LeagueQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(leaguecertificatetype.Table, leaguecertificatetype.FieldID, id),
			sqlgraph.To(league.Table, league.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, leaguecertificatetype.LeagueTable, leaguecertificatetype.LeagueColumn),
		)
		fromV = sqlgraph.Neighbors(lct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCertificates queries the certificates edge of a LeagueCertificateType.
func (c *LeagueCertificateTypeClient) QueryCertificates(lct *LeagueCertificateType) *CertificateTypeQuery {
	query := &CertificateTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(leaguecertificatetype.Table, leaguecertificatetype.FieldID, id),
			sqlgraph.To(certificatetype.Table, certificatetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, leaguecertificatetype.CertificatesTable, leaguecertificatetype.CertificatesColumn),
		)
		fromV = sqlgraph.Neighbors(lct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LeagueCertificateTypeClient) Hooks() []Hook {
	return c.hooks.LeagueCertificateType
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
